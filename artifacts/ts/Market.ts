/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as MarketContractJson } from "../Market.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace MarketTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    cancelOffer: {
      params: CallContractParams<{ b: HexString }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    cancelOffer: {
      params: SignExecuteContractMethodParams<{ b: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<MarketInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, []);
  }

  at(address: string): MarketInstance {
    return new MarketInstance(address);
  }

  tests = {
    cancelOffer: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { b: HexString }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "cancelOffer", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Market = new Factory(
  Contract.fromJson(
    MarketContractJson,
    "",
    "812299dced1499b1e550a5b48cbc638dab06dd7990c3e02989248867c6379752",
    []
  )
);

// Use this class to interact with the blockchain
export class MarketInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MarketTypes.State> {
    return fetchContractState(Market, this);
  }

  view = {
    cancelOffer: async (
      params: MarketTypes.CallMethodParams<"cancelOffer">
    ): Promise<MarketTypes.CallMethodResult<"cancelOffer">> => {
      return callMethod(
        Market,
        this,
        "cancelOffer",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    cancelOffer: async (
      params: MarketTypes.SignExecuteMethodParams<"cancelOffer">
    ): Promise<MarketTypes.SignExecuteMethodResult<"cancelOffer">> => {
      return signExecuteMethod(Market, this, "cancelOffer", params);
    },
  };

  async multicall<Calls extends MarketTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MarketTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Market,
      this,
      calls,
      getContractByCodeHash
    )) as MarketTypes.MultiCallResults<Calls>;
  }
}
